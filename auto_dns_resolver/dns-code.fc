;; KStasi library for funC
;;

(slice, slice, slice, int) prxdict_getq(cell dict, int key_len, slice index) asm(index dict key_len) "PFXDICTGETQ" "NULLSWAPIFNOT" "NULLSWAPIFNOT";
(cell, int) prxdict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) "PFXDICTSET";
(cell, int) prxdict_replace(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) "PFXDICTREPLACE";
(cell, (int)) ~prxdict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) "PFXDICTSET";
(builder) set_zeros(builder b, int n) asm "STZEROES";
(int) get_trail_zeros(slice s) asm "SDCNTTRAIL0";

cell dict_set_ref(cell dict, int key_len, slice index, cell value) asm(value index dict key_len) "DICTSETREF";
(cell, ()) ~dict_set_ref(cell dict, int key_len, slice index, cell value) asm(value index dict key_len) "DICTSETREF";
(cell, (cell)) ~dict_set_op_ref(cell dict, int key_len, slice index, cell value) asm(value index dict key_len) "DICTSETGETOPTREF";
cell dict_get_op_ref(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGETOPTREF";

int lnow() method_id {
  return 1570558743;
}

;; load persistant data
(int, cell, int, int, int, int, int, int, int) load_data() {
  slice cs = get_data().begin_parse();
  return (cs~load_uint(32), 
    cs~load_dict(),
    cs~load_uint(256),
    cs~load_uint(32),
    cs~load_uint(6),
    cs~load_uint(6),
    cs~load_uint(6),
    cs~load_uint(6),
    cs~load_uint(6));
}

;; load persistant data
(int, cell, slice) load_short_data() {
  slice cs = get_data().begin_parse();
  return (cs~load_uint(32), cs~load_dict(), cs);
}

;; store persistant data
() store_data(int seqno, cell dnst, int pk, int std_time, int std_payment, int std_change_payment, int ext_tm_payment, int ext_bit_payment, int ext_ref_payment) impure {
  set_data(begin_cell()
    .store_uint(seqno, 32)
    .store_dict(dnst)
    .store_uint(pk, 256)
    .store_uint(std_time, 32)
    .store_uint(std_payment, 6)
    .store_uint(std_change_payment, 6)
    .store_uint(ext_tm_payment, 6)
    .store_uint(ext_bit_payment, 6)
    .store_uint(ext_ref_payment, 6)
  .end_cell());
}

;; store persistant data
() store_short_data(int seqno, cell dnst, slice other) impure {
  set_data(begin_cell()
    .store_uint(seqno, 32)
    .store_dict(dnst)
    .store_slice(other)
  .end_cell());
}

;; send answer for debug 
() send_message(int type, int type_len, slice addr, int op, int query_id, slice msg_body, int grams, int mode) impure {
  var msg = begin_cell()
    .store_uint(type, type_len)
    .store_slice(addr)
    .store_grams(grams)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);
  ifnot (msg_body.slice_empty?()) {
    msg = msg.store_slice(msg_body);
  }
  send_raw_message(msg.end_cell(), mode);
}

(int, int, int, int, int, int) getpayment() method_id {
  var (seqno, dnst, pk, std_time, std_payment, std_change_payment, ext_tm_payment, ext_bit_payment, ext_ref_payment) = load_data();
  return (std_time, 2 << std_payment, 2 << std_change_payment, 2 << ext_tm_payment, 2 << ext_bit_payment, 2 << ext_ref_payment);
}

(int) calc_cost(int et, int ct, int cdn_bits, int cdn_refs) method_id {
  ;; std_payment + payment_per_seconds + payment_per_bit + payment_per_ref
  ;; caching time has no effect
  (int std_time, int std_payment, int std_change_payment, int ext_tm_payment, int ext_bit_payment, int ext_ref_payment) = getpayment();
  throw_if(98, et - now() < std_time);
  return (std_payment + (et - now() - std_time) * ext_tm_payment + cdn_bits * ext_bit_payment + cdn_refs * ext_ref_payment);
  ;;return (1500 + et + cdn_bits + cdn_refs * 4);
}

(int, cell) dnsresolve(slice dn, int c)  impure  method_id {
  (int stored_seqno, cell dnst, slice other) = load_short_data();

  if (dnst.null?()) {
    return (0, dnst);
  }

  int dn_len = dn.slice_bits();
  var (prx, val, left, f) = dnst.prxdict_getq(1023, dn);
  if (f) {
    ;; substract hashmap
    cell hshm = val~load_dict();
    if (hshm.null?()) {
      return (0, hshm);
    }

    ;; check time
    cell tm_rcd = hshm.idict_get_ref(16, 0);
  
    if (tm_rcd.null?()) {
      return (0, hshm);
    }
    slice stm_rcd = tm_rcd.begin_parse();
    (int et, int ct) = (stm_rcd~load_uint(32), stm_rcd~load_uint(32));

    if (et < now()) {
      return (0, new_dict());
    }

    ;; the whole domain found
    if (left.slice_empty?()) {
      if (c == 0) {
        return (dn_len / 8, hshm);
      }
      cell dns_record = hshm.idict_get_ref(16, c);
      return (dn_len / 8, dns_record);
    }

    ;; try to find next dns resolver
    cell nxt_rsl = hshm.idict_get_ref(16, -1);
    return (prx.slice_bits() / 8, nxt_rsl);
  }
  return (0,  new_dict()); 
}

(int) getexpirationtime(slice dn) method_id {
  (int len, cell dns_record) = dnsresolve(dn, 0);
  int dn_len = dn.slice_bits();
  if (dn_len == len) {
    cell tm_rcd = dns_record.idict_get_ref(16, 0);
    if (tm_rcd.null?()) {
      return (-1);
    }
    return (tm_rcd.begin_parse().preload_uint(32));    
  }
  return (-1);
}

() changerecord(int query_id, int msg_value, slice s_addr, slice in_msg) impure {
  var (stored_seqno, dnst, pk, std_time, std_payment, std_change_payment, ext_tm_payment, ext_bit_payment, ext_ref_payment) = load_data();

  throw_if(95, dnst.null?());

  ;; get domain name
  cell cdn = in_msg~load_ref();
  slice dn = cdn.begin_parse();
  int dn_len = dn.slice_bits();

  ;; get new data
  int mode = in_msg~load_uint(1);

  (int len, cell dns_record) = dnsresolve(dn, 0);
  int left = dn_len - len * 8;
  
  ;; check if record with owner exists
  throw_if(95, dns_record.null?());

  ;; otherwise try to resend request
  if (left) {
    ;; look for methods
    slice rsl = dns_record.begin_parse();
    (int mn, int wc, slice rsl_addr) = (rsl~load_int(32), rsl~load_int(8), rsl~load_bits(256));
    ;; create msg
    builder msg_body = begin_cell()
      .store_ref(begin_cell().store_slice(dn.skip_bits(len * 8)).end_cell())
      .store_uint(mode, 1);
      
    ifnot (mode) {
      cell cdn_value = in_msg~load_dict();
      msg_body = msg_body.store_dict(cdn_value);
    } else {
      int ext_et = in_msg~load_uint(32);
      msg_body = msg_body.store_uint(ext_et, 32);
    };
    return send_message(0xc4ff, 17, rsl_addr, 0x726570, query_id, msg_body.end_cell().begin_parse(), 0, 64);  
  }

  ;; try to find owner
  cell nxt_rsl = dns_record.idict_get_ref(16, -2);

  throw_if(96, nxt_rsl.null?());

  ;; auth
  slice rsl = nxt_rsl.begin_parse();
  (int mn, int wc, int rsl_addr) = (rsl~load_int(32), rsl~load_int(8), rsl~load_uint(256));
  var (src_wc, src_addr) = parse_std_addr(s_addr);
  throw_unless(94, rsl_addr == src_addr);

  ;; check if valid
  ifnot(mode) {
    cell cdn_value = in_msg~load_dict();
    slice new_hshm = cdn_value.begin_parse();
    (int cdn_bits, int cdn_refs) = new_hshm.slice_bits_refs();
    (int sdn_bits, int sdn_refs) = dns_record.begin_parse().slice_bits_refs();

    ;; check payment
    int price = (cdn_bits - sdn_bits) * ext_bit_payment + (cdn_refs - sdn_refs) * ext_ref_payment + 2 << std_change_payment;

    throw_unless(90, price < msg_value);

    ;; restore time
    cell tm_rcd = dns_record.idict_get_ref(16, 0);
  
    throw_if(91, tm_rcd.null?());

    cdn_value~idict_set_ref(16, 0, tm_rcd);

    ;; prepare modified record
    slice dn_value = begin_cell().store_dict(cdn_value).end_cell().begin_parse();
    dnst~prxdict_replace(1023, dn, dn_value);
    ;;store_data(stored_seqno + 1, dnst, pk, std_time, std_payment, std_change_payment, ext_tm_payment, ext_bit_payment, ext_ref_payment);
  } else {
    int ext_et = in_msg~load_uint(32);

    ;; check payment
    int price = ext_et * ext_tm_payment + 2 << std_change_payment;

    throw_unless(90, price < msg_value);

    ;; restore time
    cell tm_rcd = dns_record.idict_get_ref(16, 0);
  
    throw_if(91, tm_rcd.null?());

    slice stm_rcd = tm_rcd.begin_parse();
    (int et, int ct) = (stm_rcd~load_uint(32), stm_rcd~load_uint(32));
    dns_record~idict_set_ref(16, 0, begin_cell().store_uint(et + ext_et, 32).store_uint(ct, 32).end_cell());

    slice dn_value = begin_cell().store_dict(dns_record).end_cell().begin_parse();
    dnst~prxdict_replace(1023, dn, dn_value);
    ;;store_data(stored_seqno + 1, dnst, pk, std_time, std_payment, std_change_payment, ext_tm_payment, ext_bit_payment, ext_ref_payment);
  }
    store_data(stored_seqno + 1, dnst, pk, std_time, std_payment, std_change_payment, ext_tm_payment, ext_bit_payment, ext_ref_payment);
  
}

() dnsregistrar(int query_id, int msg_value, slice in_msg) impure {
  ;; extract data
  (int stored_seqno, cell dnst, slice other) = load_short_data();
    
  ;; if no table exist, create
  if (dnst.null?()) {
    dnst = new_dict();
  }

  ;; get domain name
  cell cdn = in_msg~load_ref();
  slice dn = cdn.begin_parse();

  ;; check if zero terminated
  throw_if(92, get_trail_zeros(dn) < 8);

  int dn_len = dn.slice_bits();

  ;; check if valid
  cell cdn_value = in_msg~load_dict();
  slice dns_hshm = cdn_value.begin_parse();
  (int cdn_bits, int cdn_refs) = dns_hshm.slice_bits_refs();
  int et = in_msg~load_uint(32);
  int ct = in_msg~load_uint(32);
  
  ;; check params
  (int price) = calc_cost(et, ct, cdn_bits, cdn_refs);

  throw_unless(90, price < msg_value);
  throw_unless(93, (et > now()) | (ct > now()));

  ;; check whether it is current contract responsibility
  (int len, cell dns_record) = dnsresolve(dn, 0);
 
  ;; otherwise try to resend request
  if (len & (dn_len / 8 - len) ) {
    throw_if(97, dns_record.null?());

    ;; look for methods
    slice rsl = dns_record.begin_parse();
    (int mn, int wc, slice rsl_addr) = (rsl~load_int(32), rsl~load_int(8), rsl~load_bits(256));

    ;; create msg
    cell msg_body = begin_cell()
      .store_ref(begin_cell().store_slice(dn.skip_bits(len * 8)).end_cell())
      .store_dict(cdn_value)
      .store_uint(et, 32)
      .store_uint(ct, 32)
      .end_cell();
    return send_message(0xc4ff, 17, rsl_addr, 0x726567, query_id, msg_body.begin_parse(), 0, 64);
  }
  ifnot (dns_record.null?()) {
    ;; restore time
    cell tm_rcd = dns_record.idict_get_ref(16, 0);

    ;; check expiration time
    ifnot (tm_rcd.null?()) {
      int et = tm_rcd.begin_parse().preload_uint(32);
      throw_if(97, et > now());
    }
  }
  
  cdn_value~idict_set_ref(16, 0, begin_cell().store_uint(et, 32).store_uint(ct, 32).end_cell());
  slice dn_value = begin_cell().store_dict(cdn_value).end_cell().begin_parse();
  dnst~prxdict_set(1023, dn, dn_value);
  store_short_data(stored_seqno + 1, dnst, other);
}

;; receive external msg
() recv_external(slice in_msg) impure {
  var signature = in_msg~load_bits(512);
  var cs = in_msg;
  int msg_seqno = cs~load_uint(32);
  (int stored_seqno, cell dnst, slice other) = load_short_data();
  int pk = other.preload_uint(256);
  throw_unless(33, msg_seqno == stored_seqno);
  throw_unless(34, check_signature(slice_hash(in_msg), signature, pk));
  accept_message();
  if (cs.slice_refs()) {
    var mode = cs~load_uint(8);
    send_raw_message(cs~load_ref(), mode);
  }
  cs.end_parse();
  store_short_data(stored_seqno + 1, dnst, other);
}

;; receive internal msg
() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);
  if (flags & 1) {
    ;; ignore all bounced messages
    return ();
  }
  var s_addr = cs~load_msg_addr();
  if (in_msg.slice_empty?()) {
    ;; inbound message has empty body
    return ();
  }
  int op = in_msg~load_uint(32);
  if (op == 0) {
    ;; simple transfer with comment, return
    return ();
  }
  int query_id = in_msg~load_uint(64);
  if (op == 0x726567) {
    return dnsregistrar(query_id, msg_value, in_msg);
  }
  if (op == 0x726570) {
    return changerecord(query_id, msg_value, s_addr, in_msg);
  }
  if (op == 0x726568) {
    int c = in_msg~load_int(16);
    slice dn = in_msg~load_ref().begin_parse();
    (int len, cell dns_record) = dnsresolve(dn, c);

    ;; continue recursively if need
    int left = dn.slice_bits() - len * 8;
    if (left & (dns_record.null?() == 0)) {
      slice rsl = dns_record.begin_parse();
      (int mn, int wc, slice rsl_addr) = (rsl~load_int(32), rsl~load_int(8), rsl~load_bits(256));
  
      cell msg_body = begin_cell()
        .store_ref(begin_cell().store_slice(dn.skip_bits(len * 8)).end_cell())
        .store_int(c, 16)
        .end_cell();
      send_message(0xc4ff, 17, rsl_addr, 0x726568, query_id, msg_body.begin_parse(), 1 << 30, 0);
    }

    cell msg_body = begin_cell()
      .store_uint(len, 32)
      .store_ref(dns_record)
      .end_cell();
    ;;return send_message(0x18, 6, begin_cell().end_cell(), 0x726569, query_id, msg_body.begin_parse(), 0, 64);
  
    var msg = begin_cell()
    .store_uint(0x30, 6)
    .store_uint(0, 64 + 32 + 1 + 1)
    .store_uint(query_id, 64)
    .store_slice(msg_body.begin_parse());
    send_raw_message(msg.end_cell(), 3);
    ;;return send_message(0x18, 6, s_addr, 0x726569, query_id, msg_body.begin_parse(), 0, 64);
  }  
  return ();
}

;; Get methods

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}
