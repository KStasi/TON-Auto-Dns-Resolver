;; KStasi library for funC
;;

(slice, slice, slice, int) prxdict_getq(cell dict, int key_len, slice index) asm(index dict key_len) "PFXDICTGETQ" "NULLSWAPIFNOT" "NULLSWAPIFNOT";
(cell, int) prxdict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) "PFXDICTSET";
(cell, (int)) ~prxdict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) "PFXDICTSET";
(slice) get_last(slice s, int n) asm "SDCUTLAST";
(int) get_trail0(slice s) asm "SDCNTTRAIL0";

;; load persistant data
(int, cell) load_data() {
  slice cs = get_data().begin_parse();
  var res = (cs~load_uint(32), cs~load_dict());
  cs.end_parse();
  return res;
}

;; store persistant data
() store_data(int seqno, cell dnst) impure {
  set_data(begin_cell()
    .store_uint(seqno, 32)
    .store_dict(dnst)
  .end_cell());
}

;; send answer for debug 
() send_answer(addr, query_id, ans_tag, mode) impure {
  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
  send_raw_message(begin_cell().store_uint(0x18, 6).store_slice(addr).store_uint(0, 5 + 4 + 4 + 64 + 32 + 1 + 1).store_uint(ans_tag, 32).store_uint(query_id, 64).end_cell(), mode);
}

(int, int) get_dn_len(slice sdn) method_id {
  int dn_len = sdn.slice_bits();
  slice ls_ch = sdn.get_last(8);
  int ils_ch = ls_ch~load_int(8);
  ls_ch.end_parse();
  return (dn_len, ils_ch);
}

() dnsregistrar(int dn_len, cell dn, cell dn_value) impure {
  (int stored_seqno, cell dnst) = load_data();
  
  ;; if no table exist, create
  if (dnst.null?()) {
    dnst = new_dict();
  }

  ;; check if exist
  ;; check if valid
  dnst~prxdict_set(dn_len, dn.begin_parse(), dn_value.begin_parse());
  store_data(stored_seqno + 1, dnst);
}

;; receive external msg
() recv_external(slice in_msg) impure {
  (int stored_seqno, cell dnst) = load_data();
  var msg_seqno = in_msg~load_uint(32);
  throw_unless(33, msg_seqno == stored_seqno);
  accept_message();

  store_data(stored_seqno + 1, dnst);
}

;; receive external msg
() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);
  if (flags & 1) {
    ;; ignore all bounced messages
    return ();
  }
  var s_addr = cs~load_msg_addr();
  if (in_msg.slice_empty?()) {
    ;; inbound message has empty body
    return ();
  }
  int op = in_msg~load_uint(32);
  if (op == 0) {
    ;; simple transfer with comment, return
    return ();
  }
  int query_id = in_msg~load_uint(64);
  if (op == 0x726567) {
    in_msg~touch();
    cell dn = in_msg~load_ref();
    slice sdn = dn.begin_parse();
    (int dn_len, int bend) = get_dn_len(sdn);
    if (bend != 0) {
      return ();
    }
    cell dns_value = in_msg~load_ref();
    return dnsregistrar(dn_len / 8, dn, dns_value);
  }  
  return ();
}















;; Get methods

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}

(int, int, int, int) getinfo() method_id {
  return (0, 0, 0, 0);
}