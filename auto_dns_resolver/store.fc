;; KStasi library for funC
;;

(slice, slice, slice, int) prxdict_getq(cell dict, int key_len, slice index) asm(index dict key_len) "PFXDICTGETQ" "NULLSWAPIFNOT" "NULLSWAPIFNOT";
(cell, int) prxdict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) "PFXDICTSET";
(cell, (int)) ~prxdict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) "PFXDICTSET";
(cell, ()) ~dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) "DICTSET";
(slice, int) dict_get?(cell dict, int key_len, int index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";
(slice, slice, int) dict_get_preve?(cell dict, int key_len, slice pivot) asm(pivot dict key_len -> 1 0 2) "DICTGETPREVEQ" "NULLSWAPIFNOT" "NULLSWAPIFNOT";
(slice) get_last(slice s, int n) asm "SDCUTLAST";
(int) get_trail0(slice s) asm "SDCNTTRAIL0";
(builder) set_zeros(builder b, int n) asm "STZEROES";

;; cell dict_set_op_ref(cell dict, int key_len, slice index, cell value) asm(value index dict key_len) "DICTSETGETREF";
;; (cell, ()) ~dict_set_op_ref(cell dict, int key_len, slice index, cell value) asm(value index dict key_len) "DICTSETGETREF";
cell dict_set_ref(cell dict, int key_len, slice index, cell value) asm(value index dict key_len) "DICTSETREF";
(cell, ()) ~dict_set_ref(cell dict, int key_len, slice index, cell value) asm(value index dict key_len) "DICTSETREF";
(cell, (cell)) ~dict_set_op_ref(cell dict, int key_len, slice index, cell value) asm(value index dict key_len) "DICTSETGETOPTREF";
cell dict_get_op_ref(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGETOPTREF";
;; DICTSETGETOPTREF

;; cell dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) "DICTSET";
;; (cell, ()) ~dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) "DICTSET";

int lnow() method_id {
  return 1570558743;
}


;; load persistant data
(int, cell) load_data() {
  slice cs = get_data().begin_parse();
  var res = (cs~load_uint(32), cs~load_dict());
  cs.end_parse();
  return res;
}

;; store persistant data
() store_data(int seqno, cell dnst) impure {
  set_data(begin_cell()
    .store_uint(seqno, 32)
    .store_dict(dnst)
  .end_cell());
}

;; send answer for debug 
() send_answer(addr, query_id, ans_tag, mode) impure {
  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
  send_raw_message(begin_cell().store_uint(0x18, 6).store_slice(addr).store_uint(0, 5 + 4 + 4 + 64 + 32 + 1 + 1).store_uint(ans_tag, 32).store_uint(query_id, 64).end_cell(), mode);
}

(int, int) get_dn_len(slice sdn) method_id {
  int dn_len = sdn.slice_bits();
  slice ls_ch = sdn.get_last(8);
  int ils_ch = ls_ch~load_int(8);
  ls_ch.end_parse();
  return (dn_len, ils_ch);
}

(int) calc_cost(int et, int ct, int cdn_bits, int cdn_refs) method_id {
  ;; std_payment + payment_per_seconds + payment_per_bit + payment_per_ref
  ;; caching time has no effect
  ;; return (12);
  return (1000);
  ;;return (1500 + et - lnow() + cdn_bits + cdn_refs * 4);
}

(int, cell) dnsresolve(slice dn, int c) method_id(-7) {
  (int stored_seqno, cell dnst) = load_data();

  if (dnst.null?()) {
    return (0, dnst);
  }

  int dn_len = dn.slice_bits();
  var (prx, val, left, f) = dnst.prxdict_getq(1023, dn);
  if (f) {
    ;; substract hashmap
    var (et, ct, hshm) = (val~load_uint(32), val~load_uint(32), val~load_dict());
    if (hshm.null?() | (et < lnow())) {
      return (0, hshm);
    }
    
    ;; the whole domain found
    if (left.slice_empty?()) {
      if (c == 0) {
        return (dn_len / 8 + 1, hshm);
      }
      cell dns_record = hshm.idict_get_ref(16, c);
      return (dn_len / 8 + 1, dns_record);
    }

    ;; try to find next dns resolver
    cell nxt_rsl = hshm.idict_get_ref(16, -1);
 
    if (nxt_rsl.null?()) {
      ;; resolver not found
      return (prx.slice_bits() / 8 + 1, nxt_rsl);
    } 
    ;; look for methods
    slice rsl = nxt_rsl.begin_parse();
    (int magic_number, slice identifier) = (rsl~load_int(32), rsl~load_msg_addr());
  
    ;; create msg
    ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool -> 0 110
    ;; src:MsgAddress dest:MsgAddressInt -> 00 identifier 
    ;; value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams -> 00000 0000 0000
    ;; created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed; -> 64 zero bits 32 zero bits
    slice msg_body = begin_cell()
      .store_slice(left)
      .store_int(c, 16)
      .end_cell()
      .begin_parse();
    var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(identifier)
      .store_uint(0, 5 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(magic_number, 32)
      .store_uint(lnow(), 64)
      .store_slice(msg_body)
      .end_cell();
    send_raw_message(msg, 64);
    ;; fix len
    return (prx.slice_bits() / 8 + 1, nxt_rsl);
  }
  return (0,  new_dict()); 
}

() dnsregistrar(slice addr, int query_id, int msg_value, slice in_msg) impure {
  ;; extract data
  (int stored_seqno, cell dnst) = load_data();
    
  ;; if no table exist, create
  if (dnst.null?()) {
    dnst = new_dict();
  }

  ;; get domain name
  cell cdn = in_msg~load_ref();
  slice dn = cdn.begin_parse();
  int dn_len = dn.slice_bits();

  ;; check if valid
  cell cdn_value = in_msg~load_dict();
  slice dns_hshm = cdn_value.begin_parse();
  (int cdn_bits, int cdn_refs) = dns_hshm.slice_bits_refs();
  int et = in_msg~load_uint(32);
  int ct = in_msg~load_uint(32);
  
  ;; check params
  (int price) = calc_cost(et, ct, cdn_bits, cdn_refs);

  if ((price > msg_value) | (ct < lnow()) | (et < lnow())) {
    return();
  }

  ;; check whether it is current contract responsibility
  var (prx, val, left, f) = dnst.prxdict_getq(1023, dn);
  if (f) {
    ;; substract hashmap
    var (etv, ctv, hshm) = (val~load_uint(32), val~load_uint(32), val~load_dict());
    if (hshm.null?() | (etv < lnow())) {
      return ();
    }

    ;; try to find next dns resolver
    cell nxt_rsl = hshm.idict_get_ref(16, -1);
 
    if (nxt_rsl.null?()) {
      ;; resolver not found
      return ();
    } 
    ;; look for methods
    slice rsl = nxt_rsl.begin_parse();
    (int mn, int i, int rsl_addr) = (rsl~load_int(32), rsl~load_int(8), rsl~load_uint(256));

    ;; create msg
    slice msg_body = begin_cell()
      .store_ref(begin_cell().store_slice(left).end_cell())
      .store_uint(et, 32)
      .store_uint(ct, 32)
      .store_dict(cdn_value)
      .end_cell()
      .begin_parse();
    var msg = begin_cell()
      .store_uint(0xc4ff, 17)
      .store_uint(rsl_addr, 256)
      .store_grams(msg_value)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(7497063, 32)
      .store_uint(query_id, 64)
      .store_slice(msg_body);
    send_raw_message(msg.end_cell(), 3);
    return ();
  }

  slice dn_value = begin_cell().store_uint(et, 32).store_uint(ct, 32).store_dict(cdn_value).end_cell().begin_parse();
  dnst~prxdict_set(1023, dn, dn_value);
  store_data(stored_seqno + 1, dnst);
}

;; receive external msg
() recv_external(slice in_msg) impure {
  (int stored_seqno, cell dnst) = load_data();
  var msg_seqno = in_msg~load_uint(32);
  throw_unless(33, msg_seqno == stored_seqno);
  accept_message();

  store_data(stored_seqno + 1, dnst);
}

;; receive external msg
() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);
  if (flags & 1) {
    ;; ignore all bounced messages
    return ();
  }
  var s_addr = cs~load_msg_addr();
  if (in_msg.slice_empty?()) {
    ;; inbound message has empty body
    return ();
  }
  int op = in_msg~load_uint(32);
  if (op == 0) {
    ;; simple transfer with comment, return
    return ();
  }
  int query_id = in_msg~load_uint(64);
  if (op == 0x726567) {
    return dnsregistrar(s_addr, query_id, msg_value, in_msg);
  }
  if (op == 0x3440B9) {
    var (dn, c) = in_msg.load_int(16);
    dnsresolve(dn, c);
    return ();
  }  
  return ();
}















;; Get methods

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}

(int, cell) getinfo() method_id {
  return load_data();
}