#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include

{ ."usage: " @' $0 type ." <workchain-id> [<filename-base>]" cr
  ."Creates a new DNS servise in specified workchain, with private key saved to or loaded from <filename-base>.pk" cr
  ."('new-dns.pk' by default)" cr 1 halt
} : usage
$# 1- -2 and ' usage if

$1 parse-workchain-id =: wc
def? $2 { @' $2 } { "new-dns" } cond constant file-base

."Creating new wallet in workchain " wc . cr

"Asm.fif" include
"dns.fif" include
<b 0 32 u,
   dictnew dict, 
   file-base +".pk" load-generate-keypair
   constant wallet_pk
   B,
   31556952 32 u,
   4 6 u,
   2 6 u,
   1 6 u,
   1 6 u,
   1 6 u,
b>
null
<b b{0011} s, 3  roll ref, rot ref, swap dict, b>  // create StateInit
dup ."StateInit: " <s csr. cr
dup hashu wc swap 2dup 2constant wallet_addr
."new DNS servise address = " 2dup .addr cr
2dup file-base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr
<b 0 32 u, b>
dup ."signing message: " <s csr. cr
dup hashu wallet_pk ed25519_sign_uint rot
<b b{1000100} s, wallet_addr addr, b{000010} s, swap <s s, b{0} s, swap B, swap <s s, b>
dup ."External message for initialization is " <s csr. cr
2 boc+>B dup Bx. cr
file-base +"-query.boc" tuck B>file
."(Saved DNS servise creating query to file " type .")" cr
